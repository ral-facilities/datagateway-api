name: CI
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']
    name: Python ${{ matrix.python-version }} Build & Tests
    steps:
    - name: Add apt repo
      run: sudo add-apt-repository universe

    # Setup Java & Python
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
        java-package: jdk
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    # ICAT Ansible clone and install dependencies
    - name: Checkout icat-ansible
      uses: actions/checkout@v2
      with:
        repository: icatproject-contrib/icat-ansible
        ref: master
        path: icat-ansible
    - name: Install Ansible
      run: pip install -r icat-ansible/requirements.txt

    # Prep for running the playbook
    - name: Create hosts file
      run: echo -e "[icatdb-minimal-hosts]\nlocalhost ansible_connection=local" > icat-ansible/hosts
    - name: Prepare vault pass
      run: echo -e "icattravispw" > icat-ansible/vault_pass.txt
    - name: Move vault to directory it'll get detected by Ansible
      run: mv icat-ansible/vault.yml icat-ansible/group_vars/all
    - name: Replace default payara user with Actions user
      run: |
        sed -i -e "s/^payara_user: \"glassfish\"/payara_user: \"runner\"/" icat-ansible/group_vars/all/vars.yml

    # Force hostname to localhost - bug fix for previous ICAT Ansible issues on Actions
    - name: Change hostname to localhost
      run: sudo hostname -b localhost

    # Create local instance of ICAT
    - name: Run ICAT Ansible Playbook
      run: |
        ansible-playbook icat-ansible/icatdb-minimal-hosts.yml -i icat-ansible/hosts --vault-password-file icat-ansible/vault_pass.txt -vv

    - name: Checkout DataGateway API
      uses: actions/checkout@v2

    # Prep for using the API for tests
    - name: Create log file
      run: touch logs.log
    - name: Configure log file location
      run: echo "`jq -r --arg REPO_DIR "$GITHUB_WORKSPACE/logs.log" \
        '.log_location=$REPO_DIR' datagateway_api/config.json.example`" > datagateway_api/config.json.example
    - name: Create config.json
      run: cp datagateway_api/config.json.example datagateway_api/config.json

    # Install Nox, Poetry and API's dependencies
    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.9
    - name: Install dependencies
      run: poetry install

    - name: Add dummy data to icatdb
      run: |
        poetry run python -m util.icat_db_generator

    # Run Nox tests session, saves and uploads a coverage report to codecov
    - name: Run Nox tests session
      run: nox -p ${{ matrix.python-version }} -s tests -- --cov=datagateway_api --cov-report=xml
    - name: Upload code coverage report
      if: matrix.python-version == '3.6'
      uses: codecov/codecov-action@v1

  linting:
    runs-on: ubuntu-20.04
    name: Linting
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: x64
    - name: Checkout DataGateway API
      uses: actions/checkout@v2

    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.9

    - name: Run Nox lint session
      run: nox -s lint

  formatting:
    runs-on: ubuntu-20.04
    name: Code Formatting
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: x64
    - name: Checkout DataGateway API
      uses: actions/checkout@v2

    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.9

    - name: Run Nox black session
      run: nox -s black

  safety:
    runs-on: ubuntu-20.04
    name: Dependency Safety
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: x64
    - name: Checkout DataGateway API
      uses: actions/checkout@v2

    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.9

    - name: Run Nox safety session
      run: nox -s safety

  generator-script-testing:
    runs-on: ubuntu-20.04
    continue-on-error: true
    name: icatdb Generator Script Consistency Test
    steps:
      - name: Add apt repo
        run: sudo add-apt-repository universe

      # Setup Java & Python
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 8
          java-package: jdk
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: x64

      # ICAT Ansible clone and install dependencies
      - name: Checkout icat-ansible
        uses: actions/checkout@v2
        with:
          repository: icatproject-contrib/icat-ansible
          ref: master
          path: icat-ansible
      - name: Install Ansible
        run: pip install -r icat-ansible/requirements.txt

      # Prep for running the playbook
      - name: Create hosts file
        run: echo -e "[icatdb-minimal-hosts]\nlocalhost ansible_connection=local" > icat-ansible/hosts
      - name: Prepare vault pass
        run: echo -e "icattravispw" > icat-ansible/vault_pass.txt
      - name: Move vault to directory it'll get detected by Ansible
        run: mv icat-ansible/vault.yml icat-ansible/group_vars/all
      - name: Replace default payara user with Actions user
        run: |
          sed -i -e "s/^payara_user: \"glassfish\"/payara_user: \"runner\"/" icat-ansible/group_vars/all/vars.yml

      # Force hostname to localhost - bug fix for previous ICAT Ansible issues on Actions
      - name: Change hostname to localhost
        run: sudo hostname -b localhost

      # Create local instance of ICAT
      - name: Run ICAT Ansible Playbook
        run: |
          ansible-playbook icat-ansible/icatdb-minimal-hosts.yml -i icat-ansible/hosts --vault-password-file icat-ansible/vault_pass.txt -vv

      - name: Checkout DataGateway API
        uses: actions/checkout@v2

      - name: Create config.json
        run: cp datagateway_api/config.json.example datagateway_api/config.json
      - name: Install Poetry
        run: pip install poetry==1.1.9
      - name: Install dependencies
        run: poetry install

      - name: Add dummy data to icatdb
        run: poetry run python -m util.icat_db_generator
      - name: Get SQL dump of dummy data
        run: mysqldump -picatdbuserpw -uicatdbuser --skip-comments icatdb > ~/generator_script_dump_1.sql

      # Drop and re-create icatdb to remove generated data
      - name: Drop icatdb
        run: mysql -picatdbuserpw -uicatdbuser -e 'DROP DATABASE icatdb;'
      - name: Create icatdb
        run: mysql -picatdbuserpw -uicatdbuser -e 'CREATE DATABASE icatdb;'
      # Regenerate table structure of icatdb
      - name: Reinstall ICAT Server
        run: cd /home/runner/install/icat.server; ./setup -vv install

      - name: Add (new) dummy data to icatdb
        run: |
          cd /home/runner/work/datagateway-api/datagateway-api; poetry run python -m util.icat_db_generator
      - name: Get SQL dump of new dummy data
        run: mysqldump -picatdbuserpw -uicatdbuser --skip-comments icatdb > ~/generator_script_dump_2.sql

      # Tests that the generator script produces consistent data over two separate runs
      - name: Diff SQL dumps
        run: diff -s ~/generator_script_dump_1.sql ~/generator_script_dump_2.sql


      # Drop and re-create icatdb to remove generated data
      - name: Drop icatdb
        run: mysql -picatdbuserpw -uicatdbuser -e 'DROP DATABASE icatdb;'
      - name: Create icatdb
        run: mysql -picatdbuserpw -uicatdbuser -e 'CREATE DATABASE icatdb;'
      # Regenerate table structure of icatdb
      - name: Reinstall ICAT Server
        run: cd /home/runner/install/icat.server; ./setup -vv install

      - name: Checkout DataGateway API (master)
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Create config.json
        run: cp datagateway_api/config.json.example datagateway_api/config.json
      - name: Install dependencies
        run: poetry install

      - name: Add dummy data to icatdb
        run: poetry run python -m util.icat_db_generator
      - name: Get SQL dump of dummy data from master's generator script
        run: mysqldump -picatdbuserpw -uicatdbuser --skip-comments icatdb > ~/generator_script_dump_master.sql

      # Tests that the generator script produces the same data as is produced with master's version

      # NOTE: If a delibrate change is made to the script that will change the data generated,
      # the diff (and therefore this job) will fail. If this is the case, don't be alarmed.
      # The `continue-on-error` keyword has been added to this job so the workflow should
      # pass when the PR is merged in, even if this job fails.
      # But, if you didn't mean to change the output of the script, there is likely a
      # problem with the changes made that will make the generator script's data
      # different to SciGateway preprod
      - name: Diff SQL dumps
        run: diff -s ~/generator_script_dump_master.sql ~/generator_script_dump_1.sql
