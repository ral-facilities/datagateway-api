info:
  description: ICAT API to interface with the DataGateway
  title: DataGateway API
  version: '0'
openapi: 3.0.0
paths:
  /applications:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The applications found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get applications based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple applications
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update applications
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple applications
        required: true
      responses:
        '200':
          description: The created applications
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new applications
      tags:
      - entities
  /applications/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the applications
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the applications
      tags:
      - entities
  /applications/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the applications matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching applications
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the applications matching the ID
      tags:
      - entities
  /datacollectiondatafiles:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The data collection datafiles found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get data collection datafiles based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple data collection datafiles
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update data collection datafiles
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple data collection datafiles
        required: true
      responses:
        '200':
          description: The created data collection datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new data collection datafiles
      tags:
      - entities
  /datacollectiondatafiles/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the data collection datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the data collection datafiles
      tags:
      - entities
  /datacollectiondatafiles/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the data collection datafiles matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching data collection datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the data collection datafiles matching the ID
      tags:
      - entities
  /datacollectiondatasets:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The data collection datasets found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get data collection datasets based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple data collection datasets
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update data collection datasets
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple data collection datasets
        required: true
      responses:
        '200':
          description: The created data collection datasets
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new data collection datasets
      tags:
      - entities
  /datacollectiondatasets/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the data collection datasets
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the data collection datasets
      tags:
      - entities
  /datacollectiondatasets/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the data collection datasets matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching data collection datasets
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the data collection datasets matching the ID
      tags:
      - entities
  /datacollectionparameters:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The data collection parameters found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get data collection parameters based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple data collection parameters
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update data collection parameters
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple data collection parameters
        required: true
      responses:
        '200':
          description: The created data collection parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new data collection parameters
      tags:
      - entities
  /datacollectionparameters/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the data collection parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the data collection parameters
      tags:
      - entities
  /datacollectionparameters/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the data collection parameters matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching data collection parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the data collection parameters matching the ID
      tags:
      - entities
  /datacollections:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The data collections found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get data collections based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple data collections
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update data collections
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple data collections
        required: true
      responses:
        '200':
          description: The created data collections
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new data collections
      tags:
      - entities
  /datacollections/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the data collections
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the data collections
      tags:
      - entities
  /datacollections/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the data collections matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching data collections
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the data collections matching the ID
      tags:
      - entities
  /datafileformats:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The datafile formats found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get datafile formats based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple datafile formats
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update datafile formats
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple datafile formats
        required: true
      responses:
        '200':
          description: The created datafile formats
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new datafile formats
      tags:
      - entities
  /datafileformats/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the datafile formats
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the datafile formats
      tags:
      - entities
  /datafileformats/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the datafile formats matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching datafile formats
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the datafile formats matching the ID
      tags:
      - entities
  /datafileparameters:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The datafile parameters found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get datafile parameters based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple datafile parameters
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update datafile parameters
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple datafile parameters
        required: true
      responses:
        '200':
          description: The created datafile parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new datafile parameters
      tags:
      - entities
  /datafileparameters/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the datafile parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the datafile parameters
      tags:
      - entities
  /datafileparameters/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the datafile parameters matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching datafile parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the datafile parameters matching the ID
      tags:
      - entities
  /datafiles:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The datafiles found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get datafiles based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple datafiles
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update datafiles
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple datafiles
        required: true
      responses:
        '200':
          description: The created datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new datafiles
      tags:
      - entities
  /datafiles/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the datafiles
      tags:
      - entities
  /datafiles/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the datafiles matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the datafiles matching the ID
      tags:
      - entities
  /datasets:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The datasets found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get datasets based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple datasets
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update datasets
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple datasets
        required: true
      responses:
        '200':
          description: The created datasets
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new datasets
      tags:
      - entities
  /datasets/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the datasets
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the datasets
      tags:
      - entities
  /datasets/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the datasets matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching datasets
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the datasets matching the ID
      tags:
      - entities
  /datasettypes:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The dataset types found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get dataset types based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple dataset types
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update dataset types
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple dataset types
        required: true
      responses:
        '200':
          description: The created dataset types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new dataset types
      tags:
      - entities
  /datasettypes/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the dataset types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the dataset types
      tags:
      - entities
  /datasettypes/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the dataset types matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching dataset types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the dataset types matching the ID
      tags:
      - entities
  /facilities:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The facilities found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get facilities based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple facilities
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update facilities
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple facilities
        required: true
      responses:
        '200':
          description: The created facilities
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new facilities
      tags:
      - entities
  /facilities/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the facilities
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the facilities
      tags:
      - entities
  /facilities/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the facilities matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching facilities
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the facilities matching the ID
      tags:
      - entities
  /facilitycycles:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The facility cycles found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get facility cycles based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple facility cycles
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update facility cycles
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple facility cycles
        required: true
      responses:
        '200':
          description: The created facility cycles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new facility cycles
      tags:
      - entities
  /facilitycycles/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the facility cycles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the facility cycles
      tags:
      - entities
  /facilitycycles/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the facility cycles matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching facility cycles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the facility cycles matching the ID
      tags:
      - entities
  /groupings:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The groupings found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get groupings based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple groupings
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update groupings
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple groupings
        required: true
      responses:
        '200':
          description: The created groupings
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new groupings
      tags:
      - entities
  /groupings/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the groupings
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the groupings
      tags:
      - entities
  /groupings/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the groupings matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching groupings
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the groupings matching the ID
      tags:
      - entities
  /instruments:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The instruments found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get instruments based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple instruments
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update instruments
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple instruments
        required: true
      responses:
        '200':
          description: The created instruments
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new instruments
      tags:
      - entities
  /instruments/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the instruments
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the instruments
      tags:
      - entities
  /instruments/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the instruments matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching instruments
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the instruments matching the ID
      tags:
      - entities
  /instrumentscientists:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The instrument scientists found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get instrument scientists based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple instrument scientists
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update instrument scientists
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple instrument scientists
        required: true
      responses:
        '200':
          description: The created instrument scientists
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new instrument scientists
      tags:
      - entities
  /instrumentscientists/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the instrument scientists
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the instrument scientists
      tags:
      - entities
  /instrumentscientists/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the instrument scientists matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching instrument scientists
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the instrument scientists matching the ID
      tags:
      - entities
  /investigationgroups:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The investigation groups found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get investigation groups based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple investigation groups
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update investigation groups
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple investigation groups
        required: true
      responses:
        '200':
          description: The created investigation groups
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new investigation groups
      tags:
      - entities
  /investigationgroups/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the investigation groups
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the investigation groups
      tags:
      - entities
  /investigationgroups/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the investigation groups matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching investigation groups
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the investigation groups matching the ID
      tags:
      - entities
  /investigationinstruments:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The investigation instruments found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get investigation instruments based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple investigation instruments
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update investigation instruments
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple investigation instruments
        required: true
      responses:
        '200':
          description: The created investigation instruments
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new investigation instruments
      tags:
      - entities
  /investigationinstruments/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the investigation instruments
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the investigation instruments
      tags:
      - entities
  /investigationinstruments/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the investigation instruments matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching investigation instruments
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the investigation instruments matching the ID
      tags:
      - entities
  /investigationparameters:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The investigation parameters found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get investigation parameters based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple investigation parameters
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update investigation parameters
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple investigation parameters
        required: true
      responses:
        '200':
          description: The created investigation parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new investigation parameters
      tags:
      - entities
  /investigationparameters/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the investigation parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the investigation parameters
      tags:
      - entities
  /investigationparameters/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the investigation parameters matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching investigation parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the investigation parameters matching the ID
      tags:
      - entities
  /investigations:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The investigations found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get investigations based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple investigations
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update investigations
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple investigations
        required: true
      responses:
        '200':
          description: The created investigations
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new investigations
      tags:
      - entities
  /investigations/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the investigations
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the investigations
      tags:
      - entities
  /investigations/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the investigations matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching investigations
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the investigations matching the ID
      tags:
      - entities
  /investigationtypes:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The investigation types found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get investigation types based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple investigation types
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update investigation types
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple investigation types
        required: true
      responses:
        '200':
          description: The created investigation types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new investigation types
      tags:
      - entities
  /investigationtypes/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the investigation types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the investigation types
      tags:
      - entities
  /investigationtypes/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the investigation types matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching investigation types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the investigation types matching the ID
      tags:
      - entities
  /investigationusers:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The investigation users found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get investigation users based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple investigation users
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update investigation users
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple investigation users
        required: true
      responses:
        '200':
          description: The created investigation users
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new investigation users
      tags:
      - entities
  /investigationusers/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the investigation users
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the investigation users
      tags:
      - entities
  /investigationusers/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the investigation users matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching investigation users
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the investigation users matching the ID
      tags:
      - entities
  /jobs:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The jobs found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get jobs based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple jobs
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update jobs
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple jobs
        required: true
      responses:
        '200':
          description: The created jobs
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new jobs
      tags:
      - entities
  /jobs/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the jobs
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the jobs
      tags:
      - entities
  /jobs/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the jobs matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching jobs
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the jobs matching the ID
      tags:
      - entities
  /keywords:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The keywords found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get keywords based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple keywords
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update keywords
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple keywords
        required: true
      responses:
        '200':
          description: The created keywords
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new keywords
      tags:
      - entities
  /keywords/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the keywords
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the keywords
      tags:
      - entities
  /keywords/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the keywords matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching keywords
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the keywords matching the ID
      tags:
      - entities
  /parametertypes:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The parameter types found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get parameter types based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple parameter types
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update parameter types
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple parameter types
        required: true
      responses:
        '200':
          description: The created parameter types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new parameter types
      tags:
      - entities
  /parametertypes/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the parameter types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the parameter types
      tags:
      - entities
  /parametertypes/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the parameter types matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching parameter types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the parameter types matching the ID
      tags:
      - entities
  /permissiblestringvalues:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The permissible string values found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get permissible string values based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple permissible string values
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update permissible string values
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple permissible string values
        required: true
      responses:
        '200':
          description: The created permissible string values
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new permissible string values
      tags:
      - entities
  /permissiblestringvalues/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the permissible string values
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the permissible string values
      tags:
      - entities
  /permissiblestringvalues/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the permissible string values matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching permissible string values
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the permissible string values matching the ID
      tags:
      - entities
  /publications:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The publications found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get publications based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple publications
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update publications
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple publications
        required: true
      responses:
        '200':
          description: The created publications
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new publications
      tags:
      - entities
  /publications/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the publications
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the publications
      tags:
      - entities
  /publications/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the publications matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching publications
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the publications matching the ID
      tags:
      - entities
  /publicsteps:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The public steps found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get public steps based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple public steps
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update public steps
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple public steps
        required: true
      responses:
        '200':
          description: The created public steps
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new public steps
      tags:
      - entities
  /publicsteps/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the public steps
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the public steps
      tags:
      - entities
  /publicsteps/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the public steps matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching public steps
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the public steps matching the ID
      tags:
      - entities
  /relateddatafiles:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The related datafiles found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get related datafiles based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple related datafiles
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update related datafiles
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple related datafiles
        required: true
      responses:
        '200':
          description: The created related datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new related datafiles
      tags:
      - entities
  /relateddatafiles/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the related datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the related datafiles
      tags:
      - entities
  /relateddatafiles/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the related datafiles matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching related datafiles
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the related datafiles matching the ID
      tags:
      - entities
  /rules:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The rules found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get rules based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple rules
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update rules
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple rules
        required: true
      responses:
        '200':
          description: The created rules
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new rules
      tags:
      - entities
  /rules/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the rules
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the rules
      tags:
      - entities
  /rules/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the rules matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching rules
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the rules matching the ID
      tags:
      - entities
  /sampleparameters:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The sample parameters found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get sample parameters based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple sample parameters
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update sample parameters
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple sample parameters
        required: true
      responses:
        '200':
          description: The created sample parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new sample parameters
      tags:
      - entities
  /sampleparameters/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the sample parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the sample parameters
      tags:
      - entities
  /sampleparameters/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the sample parameters matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching sample parameters
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the sample parameters matching the ID
      tags:
      - entities
  /samples:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The samples found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get samples based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple samples
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update samples
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple samples
        required: true
      responses:
        '200':
          description: The created samples
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new samples
      tags:
      - entities
  /samples/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the samples
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the samples
      tags:
      - entities
  /samples/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the samples matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching samples
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the samples matching the ID
      tags:
      - entities
  /sampletypes:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The sample types found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get sample types based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple sample types
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update sample types
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple sample types
        required: true
      responses:
        '200':
          description: The created sample types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new sample types
      tags:
      - entities
  /sampletypes/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the sample types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the sample types
      tags:
      - entities
  /sampletypes/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the sample types matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching sample types
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the sample types matching the ID
      tags:
      - entities
  /shifts:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The shifts found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get shifts based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple shifts
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update shifts
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple shifts
        required: true
      responses:
        '200':
          description: The created shifts
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new shifts
      tags:
      - entities
  /shifts/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the shifts
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the shifts
      tags:
      - entities
  /shifts/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the shifts matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching shifts
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the shifts matching the ID
      tags:
      - entities
  /studies:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The studies found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get studies based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple studies
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update studies
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple studies
        required: true
      responses:
        '200':
          description: The created studies
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new studies
      tags:
      - entities
  /studies/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the studies
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the studies
      tags:
      - entities
  /studies/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the studies matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching studies
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the studies matching the ID
      tags:
      - entities
  /studyinvestigations:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The study investigations found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get study investigations based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple study investigations
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update study investigations
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple study investigations
        required: true
      responses:
        '200':
          description: The created study investigations
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new study investigations
      tags:
      - entities
  /studyinvestigations/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the study investigations
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the study investigations
      tags:
      - entities
  /studyinvestigations/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the study investigations matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching study investigations
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the study investigations matching the ID
      tags:
      - entities
  /usergroups:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The user groups found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get user groups based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple user groups
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update user groups
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple user groups
        required: true
      responses:
        '200':
          description: The created user groups
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new user groups
      tags:
      - entities
  /usergroups/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the user groups
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the user groups
      tags:
      - entities
  /usergroups/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the user groups matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching user groups
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the user groups matching the ID
      tags:
      - entities
  /users:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      - description: Return unique values for the fields requested
        in: query
        name: distinct
        required: false
        schema:
          example:
          - FIELD 1
          - FIELD 2
          type: object
      - description: Given the names of related entities, include them in the results
        in: query
        name: include
        required: false
        schema:
          example:
            Relation 1:
            - Relation A
            - Relation B
          type: object
      - description: Limit the number of entities returned
        in: query
        name: limit
        required: false
        schema:
          example: 4
          type: number
      - description: Given a field and direction, order the returned entities
        in: query
        name: order
        required: false
        schema:
          example: ID DESC
          type: string
      - description: Offset the returned entities by a given number
        in: query
        name: skip
        required: false
        schema:
          example: 5
          type: number
      responses:
        '200':
          description: The users found
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no results are found
      summary: Get users based on filters
      tags:
      - entities
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Update one or multiple users
        required: true
      responses:
        '200':
          description: The updated entity
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity to update could not be found
      summary: Update users
      tags:
      - entities
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Create one or multiple users
        required: true
      responses:
        '200':
          description: The created users
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
      summary: Add new users
      tags:
      - entities
  /users/count:
    get:
      parameters:
      - description: Apply a where filter to all entities. The filter can take the
          form of {"field":{<operator>:"value"}, where the possible operators are
          like, gte, lte and eq
        in: query
        name: where
        required: false
        schema:
          example:
            ID:
              eq: 1
          type: object
      responses:
        '200':
          description: The count of the users
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are given
      summary: Return the count of the users
      tags:
      - entities
  /users/{id}:
    delete:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '203':
          description: Blank response when the entity is deleted
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When the entity can't be found
      summary: Delete the users matching the ID
      tags:
      - entities
    get:
      parameters:
      - description: The id of an entity
        in: path
        name: id
        required: true
        schema:
          example: 4
          type: integer
      responses:
        '200':
          description: The matching users
        '401':
          description: When no credentials are provided
        '403':
          description: When bad credentials are provided
        '404':
          description: When no result is found
      summary: Find the users matching the ID
      tags:
      - entities
servers:
- url: http://localhost:5000
